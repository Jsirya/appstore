package ai.elimu.appstore.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ai.elimu.appstore.dao.converter.ApplicationStatusConverter;
import ai.elimu.appstore.dao.converter.LiteracySkillSetConverter;
import ai.elimu.appstore.dao.converter.LocaleConverter;
import ai.elimu.appstore.dao.converter.NumeracySkillSetConverter;
import ai.elimu.appstore.model.project.AppGroup;
import ai.elimu.model.enums.Locale;
import ai.elimu.model.enums.admin.ApplicationStatus;
import java.util.Set;

import ai.elimu.appstore.model.Application;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPLICATION".
*/
public class ApplicationDao extends AbstractDao<Application, Long> {

    public static final String TABLENAME = "APPLICATION";

    /**
     * Properties of entity Application.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Locale = new Property(1, String.class, "locale", false, "LOCALE");
        public final static Property PackageName = new Property(2, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Infrastructural = new Property(3, Boolean.class, "infrastructural", false, "INFRASTRUCTURAL");
        public final static Property LiteracySkills = new Property(4, String.class, "literacySkills", false, "LITERACY_SKILLS");
        public final static Property NumeracySkills = new Property(5, String.class, "numeracySkills", false, "NUMERACY_SKILLS");
        public final static Property ApplicationStatus = new Property(6, String.class, "applicationStatus", false, "APPLICATION_STATUS");
        public final static Property AppGroupId = new Property(7, Long.class, "appGroupId", false, "APP_GROUP_ID");
        public final static Property ListOrder = new Property(8, Integer.class, "listOrder", false, "LIST_ORDER");
    }

    private DaoSession daoSession;

    private final LocaleConverter localeConverter = new LocaleConverter();
    private final LiteracySkillSetConverter literacySkillsConverter = new LiteracySkillSetConverter();
    private final NumeracySkillSetConverter numeracySkillsConverter = new NumeracySkillSetConverter();
    private final ApplicationStatusConverter applicationStatusConverter = new ApplicationStatusConverter();

    public ApplicationDao(DaoConfig config) {
        super(config);
    }
    
    public ApplicationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPLICATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LOCALE\" TEXT NOT NULL ," + // 1: locale
                "\"PACKAGE_NAME\" TEXT NOT NULL ," + // 2: packageName
                "\"INFRASTRUCTURAL\" INTEGER," + // 3: infrastructural
                "\"LITERACY_SKILLS\" TEXT," + // 4: literacySkills
                "\"NUMERACY_SKILLS\" TEXT," + // 5: numeracySkills
                "\"APPLICATION_STATUS\" TEXT NOT NULL ," + // 6: applicationStatus
                "\"APP_GROUP_ID\" INTEGER," + // 7: appGroupId
                "\"LIST_ORDER\" INTEGER);"); // 8: listOrder
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPLICATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Application entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, localeConverter.convertToDatabaseValue(entity.getLocale()));
        stmt.bindString(3, entity.getPackageName());
 
        Boolean infrastructural = entity.getInfrastructural();
        if (infrastructural != null) {
            stmt.bindLong(4, infrastructural ? 1L: 0L);
        }
 
        Set literacySkills = entity.getLiteracySkills();
        if (literacySkills != null) {
            stmt.bindString(5, literacySkillsConverter.convertToDatabaseValue(literacySkills));
        }
 
        Set numeracySkills = entity.getNumeracySkills();
        if (numeracySkills != null) {
            stmt.bindString(6, numeracySkillsConverter.convertToDatabaseValue(numeracySkills));
        }
        stmt.bindString(7, applicationStatusConverter.convertToDatabaseValue(entity.getApplicationStatus()));
 
        Long appGroupId = entity.getAppGroupId();
        if (appGroupId != null) {
            stmt.bindLong(8, appGroupId);
        }
 
        Integer listOrder = entity.getListOrder();
        if (listOrder != null) {
            stmt.bindLong(9, listOrder);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Application entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, localeConverter.convertToDatabaseValue(entity.getLocale()));
        stmt.bindString(3, entity.getPackageName());
 
        Boolean infrastructural = entity.getInfrastructural();
        if (infrastructural != null) {
            stmt.bindLong(4, infrastructural ? 1L: 0L);
        }
 
        Set literacySkills = entity.getLiteracySkills();
        if (literacySkills != null) {
            stmt.bindString(5, literacySkillsConverter.convertToDatabaseValue(literacySkills));
        }
 
        Set numeracySkills = entity.getNumeracySkills();
        if (numeracySkills != null) {
            stmt.bindString(6, numeracySkillsConverter.convertToDatabaseValue(numeracySkills));
        }
        stmt.bindString(7, applicationStatusConverter.convertToDatabaseValue(entity.getApplicationStatus()));
 
        Long appGroupId = entity.getAppGroupId();
        if (appGroupId != null) {
            stmt.bindLong(8, appGroupId);
        }
 
        Integer listOrder = entity.getListOrder();
        if (listOrder != null) {
            stmt.bindLong(9, listOrder);
        }
    }

    @Override
    protected final void attachEntity(Application entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Application readEntity(Cursor cursor, int offset) {
        Application entity = new Application( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            localeConverter.convertToEntityProperty(cursor.getString(offset + 1)), // locale
            cursor.getString(offset + 2), // packageName
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // infrastructural
            cursor.isNull(offset + 4) ? null : literacySkillsConverter.convertToEntityProperty(cursor.getString(offset + 4)), // literacySkills
            cursor.isNull(offset + 5) ? null : numeracySkillsConverter.convertToEntityProperty(cursor.getString(offset + 5)), // numeracySkills
            applicationStatusConverter.convertToEntityProperty(cursor.getString(offset + 6)), // applicationStatus
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // appGroupId
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // listOrder
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Application entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocale(localeConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setPackageName(cursor.getString(offset + 2));
        entity.setInfrastructural(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setLiteracySkills(cursor.isNull(offset + 4) ? null : literacySkillsConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setNumeracySkills(cursor.isNull(offset + 5) ? null : numeracySkillsConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setApplicationStatus(applicationStatusConverter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setAppGroupId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setListOrder(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Application entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Application entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Application entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAppGroupDao().getAllColumns());
            builder.append(" FROM APPLICATION T");
            builder.append(" LEFT JOIN APP_GROUP T0 ON T.\"APP_GROUP_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Application loadCurrentDeep(Cursor cursor, boolean lock) {
        Application entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        AppGroup appGroup = loadCurrentOther(daoSession.getAppGroupDao(), cursor, offset);
        entity.setAppGroup(appGroup);

        return entity;    
    }

    public Application loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Application> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Application> list = new ArrayList<Application>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Application> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Application> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
